# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  - group: vscode-autoscript-deploy

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "16.x"
    displayName: "Install Node.js"

  - script: npm install
    displayName: Install NPM

  - bash: |
      sudo npm install -g webpack
      sudo npm install -g vsce

    displayName: Install VSCE and Webpack

  - script: npm run vsce:package
    displayName: Create VSIX
    env:
      GITHUB_PAT: $(github_pat)

  # For releasable builds, we'll want the branch
  # Expects that a 'version.txt' has been laid down by a previous step
  - bash: |
      PACKAGE_VERSION=$(node -p "require('./package.json').version")
      echo "$PACKAGE_VERSION" > version.txt

      echo $(Build.SourceBranch) | sed "s|refs/[^/]*/||" > branch.txt      
      VERSION_REGEX="## $(echo $PACKAGE_VERSION | sed 's/\./\\./g')"
    displayName: Get branch

  # Choose files to publish
  - task: CopyFiles@2
    displayName: Stage VSIX for publishing
    inputs:
      contents: |-
        *.vsix
        version.txt
        branch.txt
      targetFolder: $(Build.ArtifactStagingDirectory)

  # Publish files as an artifact
  - task: PublishPipelineArtifact@1
    displayName: Publish VSIX
    inputs:
      artifact: script-deploy-vs-code
      targetPath: $(Build.ArtifactStagingDirectory)

  - bash: |

      PACKAGE_VERSION=$(cat version.txt)

      vsce publish -p $(marketplace_pat) --packagePath maximo-script-deploy-$PACKAGE_VERSION.vsix

    displayName: "Publish to Marketplace"

  - bash: |
      git config --local user.name "Jason VenHuizen"
      git config --local user.email "jason@sharptree.io"

      git remote set-url --push github https://jvenhuizen:$(github_pat)@github.com/sharptree/vscode-autoscript-deploy.git
      git push github HEAD:main

      PACKAGE_VERSION=$(cat version.txt)
      if [ ! $(git tag -l "release/$PACKAGE_VERSION") ]; then
        git tag "release/$PACKAGE_VERSION"
      fi

      git push github release/$PACKAGE_VERSION

    displayName: "Publish GitHub"
